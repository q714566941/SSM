package test;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import proxy_static_service.ISomeService;
import proxy_static_service.SomeServiceImpl;

public class MyTest {

	public static void main(String[] args) {
		ISomeService target = new SomeServiceImpl();
		ISomeService service = (ISomeService) Proxy.newProxyInstance(         //Proxy类用来创建动态代理类 (返回是Object类型)
				target.getClass().getClassLoader(),            //目标类类加载器
				target.getClass().getInterfaces(),             //目标类实现的所有接口
				new InvocationHandler() {                      //匿名内部类
					
					@Override
					public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
						// TODO Auto-generated method stub
						return null;
					}
				});
		String result = service.doFirst();                       
		System.out.println("result: " + result);                
		service.doSecond();
	}
}
