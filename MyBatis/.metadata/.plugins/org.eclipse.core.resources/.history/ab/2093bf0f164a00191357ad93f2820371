package test;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import proxy_static_service.ISomeService;
import proxy_static_service.SomeServiceImpl;

public class MyTest {

	public static void main(String[] args) {
		final ISomeService target = new SomeServiceImpl();
		
		//使用jdk的Proxy动态代理，目标类必须实现接口！
		//因为底层执行原理与静态代理相同
		ISomeService service = (ISomeService) Proxy.newProxyInstance(         //Proxy类用来创建动态代理类 (返回是Object类型)
				target.getClass().getClassLoader(),            //目标类类加载器
				target.getClass().getInterfaces(),             //目标类实现的所有接口
				new InvocationHandler() {                      //匿名内部类？？？   调用代理对象的目标方法
					
					//proxy：代理对象
					//method：目标方法
					//args：目标方法参数列表
					@Override
					public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
						//调用目标方法
						Object result = method.invoke(target, args);             //alt+shift+L：补充返回值
						if (result != null) {
							result = ((String) result).toUpperCase();            //alt+shift+Z：添加条件语句
						}
						return result;
					}
				});
		String result = service.doFirst();                         //method = doFirst()             
		System.out.println("result: " + result);                
		service.doSecond();
	}
}
